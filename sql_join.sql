USE sakila;

/* Write SQL queries to perform the following tasks using the Sakila database:

1. List the number of films per category.
2. Retrieve the store ID, city, and country for each store.
3. Calculate the total revenue generated by each store in dollars.
4. Determine the average running time of films for each category.

*/

SELECT * 
FROM 
	film_category;
    
-- Number of films per category
/* Relevant table:
1. film: Contains info about fil (e.g. film_id, title)
2. film_category: acts as a junction table linking film_id to categories (category_id)
3. category: Contains info about categoreis (e.g. category_id, name)

Relationship
film.film_id -> film_category.film_id
category.category_id -> film_category.category_id

*/
SELECT 
    c.name AS category_name, COUNT(fc.film_id) AS film_count
FROM
    category c
        JOIN
    film_category fc ON c.category_id = fc.category_id
        JOIN
    film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY film_count DESC;

-- Retrieve the store_id, cty and country for each store
/* Relevant table:
1. store: Contains info about fil (e.g. store_id, address_id)
2. address: Contains the adress_id and a referene to the city_id
3. city: contains city_Id and a reference to the country_id
4. country: Contains country_Id and country names

*/
SELECT s.store_id, ci.city, co.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country co ON ci.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars
/* Relevant table:
1. store: Contains info about fil (e.g. store_id, address_id)
2. staff: Contains the staff_id and a referene to the city_id
3. payment: contains info about payment_Id and amount
*/
SELECT 
    s.store_id, ROUND(SUM(p.amount), 2) AS total_revenue
FROM
    store s
        JOIN
    staff st ON s.store_id = st.store_id
        JOIN
    payment p ON st.staff_id = p.staff_id
GROUP BY s.store_id
ORDER BY s.store_id;

-- 4. Determine the avg. running time of films for each category
/* Relevant table:
1. film: Contains info about fil (e.g. film_id, title, length)
2. film_category: acts as a junction table linking film_id to categories (category_id)
3. category: Contains info about categoreis (e.g. category_id, name)
*/

SELECT 
    c.name AS category_name, AVG(length) AS avg_running_time
FROM
    category c
        JOIN
    film_category fc ON c.category_id = fc.category_id
        JOIN
    film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY avg_running_time DESC;

-- Bonus: Identifying the film categories with the longest avg. running time
SELECT 
    c.name AS category_name, AVG(length) AS avg_running_time
FROM
    category c
        JOIN
    film_category fc ON c.category_id = fc.category_id
        JOIN
    film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY avg_running_time
LIMIT 1;

-- Displaying the top 10 most frequently rented movies in descending order
SELECT f.title AS movie_title, COUNT(r.rental_id) AS most_rented_movies
FROM inventory i
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY most_rented_movies DESC
LIMIT 10;

-- Determine if the movie "Academy Dinosaure" can be rented from store 1
SELECT f.title, s.store_id, COUNT(i.inventory_id) AS available
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN store s ON i.store_id = s.store_id
LEFT JOIN 
    rental r ON i.inventory_id = r.inventory_id AND r.return_date IS NULL
WHERE 
    f.title = 'Academy Dinosaur'
    AND s.store_id = 1
GROUP BY 
    f.title, s.store_id;
    
/*Provide a list of all distinct film titles, along with their availability status in the inventory. 
Include a column indicating whether each title is 'Available' or 'NOT available.' 
Note that there are 42 titles that are not in the inventory, and this information can be obtained using a 
CASE statement combined with IFNULL
*/
SELECT 
	f.title, 
    COUNT(r.rental_id) AS currently_rented,
    SUM(CASE WHEN r.rental_id IS NULL THEN 1 ELSE 0 END) AS available_copies,
    CASE 
        WHEN COUNT(r.rental_id) > 0 THEN 'NOT Available'
        ELSE 'Available'
    END AS availability_status
FROM film f
JOIN inventory i ON f.film_id = i.film_id
LEFT JOIN 
    rental r ON i.inventory_id = r.inventory_id AND r.return_date IS NULL
GROUP BY 
    f.title
ORDER BY 
    currently_rented DESC, f.title;
    

